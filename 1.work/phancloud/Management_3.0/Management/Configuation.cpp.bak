#include "stdafx.h"
int ConfiguationEventer::ConfiguationEventNumber = 0;

LRESULT CALLBACK DialogProcCONFIGUATION_TITLE( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam )
{
	static bool CONFIGUATIONbChangeText = true;
	PAINTSTRUCT ps;
	HDC hdc; 
	HMENU hMenu, hSubMenu;
	
	switch(msg)  
	{
		case WM_CREATE:	 
		{				
			
			hMenu = CreateMenu();
			hSubMenu = CreatePopupMenu();
			AppendMenu(hSubMenu, MF_SEPARATOR, 0, NULL);			
			AppendMenu(hMenu, MF_STRING, (UINT)ID_MYBUTTON, L"總是顯示在最上層");
			SetMenu(hwnd, hMenu);	
			DestroyMenu(hSubMenu);

			SetWindowPos(hwnd,HWND_NOTOPMOST,0,0,0,0,SWP_NOMOVE|SWP_NOSIZE);

			CreateWindow(L"BUTTON", 
						L"",
						WS_CHILD | WS_VISIBLE |BS_GROUPBOX	,
						5, 0, 370, 325, hwnd, NULL,
						((LPCREATESTRUCT)lParam)->hInstance,
						NULL);
			CreateWindow(L"STATIC", 
						L"伺服端IP", WS_CHILD | WS_VISIBLE,
						10, 11, 60, 20, hwnd, NULL, 
						((LPCREATESTRUCT)lParam)->hInstance,
						NULL);	
			
			hConfiguationIPText = CreateWindow(L"EDIT", 
						L"", WS_CHILD | WS_VISIBLE | WS_BORDER,
						80, 11, 160, 20, hwnd, NULL, 
						((LPCREATESTRUCT)lParam)->hInstance,
						NULL);
 //			
			const char* fn = "Setting.cfg";
			std::vector<char> read;
			readTheWholeFile(fn, read);	
			std::string   s(read.begin(),read.end());		
			std::string gg = "IpAddress = ";
			int abc = s.find_last_of(gg);	
			trim(s.substr(abc)).c_str();
			
			//
			TCHAR lpString[128] = {'s'};
			
			MultiByteToWideChar( CP_ACP, 0, trim(s.substr(abc)).c_str(), -1, lpString, 128 );
					
			SetWindowText(hConfiguationIPText,lpString);		

		}
		break;
		case WM_COMMAND:
		// 剖析功能表選取項目:
		switch (LOWORD(wParam))
		{
		case ID_MYBUTTON:
			{		
				if (CONFIGUATIONbChangeText)
               { 
					hMenu = GetMenu(hwnd); 					
					ModifyMenu(hMenu, ID_MYBUTTON, MF_STRING, ID_MYBUTTON, L"一般層級"); 
					SetMenu(hwnd, hMenu);	
					SetWindowPos(hwnd,HWND_TOPMOST,0,0,0,0,SWP_NOMOVE|SWP_NOSIZE);														
               }
               else
               {									
					hMenu = GetMenu(hwnd); 					
					ModifyMenu(hMenu, ID_MYBUTTON, MF_STRING, ID_MYBUTTON, L"總是顯示在最上層"); 
					SetMenu(hwnd, hMenu);					
					SetWindowPos(hwnd,HWND_NOTOPMOST,0,0,0,0,SWP_NOMOVE|SWP_NOSIZE);
               }
               CONFIGUATIONbChangeText = !CONFIGUATIONbChangeText;
			}
			break;
		default:
			return DefWindowProc(hwnd, msg, wParam, lParam);
		}
		break;		
		case WM_KEYUP:
		{						
			switch(wParam)
			{
				case VK_ESCAPE:
				{     					
					SendMessage(hwnd, WM_CLOSE, NULL, NULL);
				}          
				break;			
			}        
		}
		break;
		case WM_PAINT:
			hdc = BeginPaint(hwnd, &ps);
			// TODO: 在此加入任何繪圖程式碼...
			//TextOut(hdc,20,20,L"CONFIGUATION",12);
			EndPaint(hwnd, &ps);
		break;
		case WM_CLOSE:
			ConfiguationEventer::ConfiguationEventNumber = ConfiguationEventer::ConfiguationEventNumber -1;
			DestroyWindow(hwnd);
			break;       
		default:
			return DefWindowProc(hwnd, msg, wParam, lParam);
  }
  return 0;
  

}


void RegisterDialogCONFIGUATION_TITLE(HWND hwnd) 
{
  WNDCLASSEX wc = {0};
  wc.cbSize           = sizeof(WNDCLASSEX);
  wc.lpfnWndProc      = (WNDPROC) DialogProcCONFIGUATION_TITLE;
  wc.hInstance        = hinst;
  wc.hbrBackground    = GetSysColorBrush(COLOR_3DFACE);
  wc.lpszClassName    = TEXT("DialogProcCONFIGUATION_TITLE");
  RegisterClassEx(&wc);

   CreateWindowEx(WS_EX_DLGMODALFRAME | WS_EX_TOPMOST,  TEXT("DialogProcCONFIGUATION_TITLE"), TEXT("CONFIGUATION"), 
        WS_VISIBLE | WS_SYSMENU | WS_CAPTION , 100, 100, 400, 400, 
        NULL, NULL, hinst,  NULL);
   
   ConfiguationEventer::ConfiguationEventNumber = ConfiguationEventer::ConfiguationEventNumber +1;
}