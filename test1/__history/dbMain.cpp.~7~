// ---------------------------------------------------------------------------

#include <fmx.h>
#pragma hdrstop

#include "dbMain.h"

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TForm1 *Form1;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner)
{
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key,
	System::WideChar &KeyChar, TShiftState Shift)
{
	if (Key == VK_ESCAPE)
	{
		exit(0);
	}
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	// btntest();

	ListBox1->Columns = 3;
	dbview();

}
// ---------------------------------------------------------------------------

void TForm1::btntest()
{

	sqlite3 *db = NULL;
	char *zErrMsg = 0;
	int rc;
	char *sql;

	rc = sqlite3_open("dice.db", &db);
	if (rc)
	{
		fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
		sqlite3_close(db);
		exit(1);
	}
	else
	{
	}

	int nrow = 0, ncolumn = 0;
	char ch1[4096] =
		"CREATE TABLE SensorData(ID INTEGER PRIMARY KEY,ROSENAME VARCHAR(12),ROSEID INTEGER );";
//指揮官名稱		Commander_Name
//職業		      	Profession
//指揮官HP	      	Commander_HP
//行動狀態	      	Action_Status
//地圖上形象		Map_image
//Y軸坐標			Y-axis_coordinate
//X軸坐標			X_coordinate
//裝備武器			Equipped_with_weapons
//輔助魔法效果		Auxiliary_magic_effect
//裝備飾物	       	Equipment_accessories
//裝備防具	       	Equipment_and_armor
//傭兵所屬	       	Mercenary_belongs
//傭兵兵種	       	Mercenary_arms
//傭兵HP			Mercenary_HP
//傭兵行動狀態		Mercenary_action_status
//傭兵		     	Mercenary
//部隊序號	     	Force_serial_number
//傭兵Y軸坐標		The_mercenary_Y_axis_coordinates
//傭兵X軸坐標		The_mercenary_X_axis_coordinates
//指令		      	Instruction
//所屬勢力	      	Belongs_forces
//指揮官經驗		Commander_of_experience
//指揮官等級		Commander_Level
//最大MP			Max_MP
//MP				MP
//防禦力			Defense
//攻擊力			ATK
//移動力			Moving_force
//指揮範圍			Command_range
//防禦修正			Defense_correction
//攻擊修正			Attack_modifier
//魔法16-23			Magic_16-23
//職業魔法防禦		Occupational_magic_defense
//魔法1-7			Magic_1-7
//魔法8-15			Magic_8-15
//召喚獸MP			Summon_MP
//魅惑前所屬		Charm_of_before_they
//指揮官肖像		Commander_Portrait



	sql = ch1;
	sqlite3_exec(db, sql, 0, 0, &zErrMsg);

	char aa[4096] = "INSERT INTO \"SensorData\" VALUES( NULL ,'我愛羅', 3);";

	sql = aa;
	sqlite3_exec(db, sql, 0, 0, &zErrMsg);

	sqlite3_close(db);

}

void TForm1::dbview()
{
	sqlite3 *db = NULL;
	char *zErrMsg = 0;
	int rc;
	char *sql;

	rc = sqlite3_open("dice.db", &db);
	if (rc)
	{
		fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
		sqlite3_close(db);
		exit(1);
	}
	else
	{
	}

	char aa[1024] = "select * from SensorData;";
	int nrow = 0, ncolumn = 0;
	char **azResult; // 二維數組存放結果

	sql = aa;
	// MessageBoxA(NULL, "cc", "oo", MB_OK);
	sqlite3_get_table(db, sql, &azResult, &nrow, &ncolumn, &zErrMsg);
	for (int i = 0; i < (nrow + 1) * ncolumn; i++)
	{
		// std::cout << azResult[i] << std::endl;
		// MessageBoxA(NULL, azResult[i], "oo", MB_OK);
		ListBox1->Items->Add(azResult[i]);
	}
	sqlite3_free_table(azResult);
	sqlite3_close(db);
}
