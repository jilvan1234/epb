// ---------------------------------------------------------------------------

#include <fmx.h>
#pragma hdrstop

#include "Unit1.h"
// #include <mmsystem.h>

#include <dshow.h>
#pragma comment(lib, "strmiids.lib")
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TForm1 *Form1;

void SoundPlay(long index);
int Load_WAV();

struct sound
{
	IGraphBuilder *pGraphBuilder;
	IMediaControl *pMediaControl;
	IMediaSeeking *pMediaSeeking;
	IMediaEventEx *pMediaEventEx;
	WCHAR wFileName[256];
	char totalTime[256];
	LONGLONG totalDuration;
	LONGLONG lDuration100NanoSecs;
	float step;
	long temporary;
	char szFileName[256];
};

sound *Sound;

class B
{
public:
	// ...
	bool isFinished() const
	{
		return m_isFinished;
	}

	void cycle()
	{
		// ...
	}

private:
	// ...
	bool m_isFinished;

};

class A
{
public:
	void poll(B& b)
	{

		if (b.isFinished())
		{
			// Do something
			MessageBoxA(NULL, "bb", "oo", MB_OK);
		}
	}
};

A a;
B b;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner)
{
	CoInitialize(NULL);
	if (Load_WAV() != 0)
		exit(0);

}
// ---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	// wchar_t *wav_handle;
	// HRSRC h = FindResource(HInstance, L"IDR_WAVE1", L"WAV");
	// HGLOBAL h1 = LoadResource(HInstance, h);
	// wav_handle = (wchar_t *)LockResource(h1);
	// sndPlaySound(wav_handle, SND_MEMORY | SND_ASYNC | SND_LOOP);

	SoundPlay(0);
	Sleep(1000);
	Sound[0].pMediaControl->Stop();

	SoundPlay(1);

	// BitmapListAnimation1 = new TBitmapListAnimation();
}

// ---------------------------------------------------------------------------

enum GameState
{
	GAME_STATE_LOGO = 0, GAME_STATE_TRAILER, GAME_STATE_MAIN_MENU,
	GAME_STATE_INGAME, GAME_STATE_SETTINGS_MENU,
};

static int gameState = GAME_STATE_LOGO;

void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key,
	System::WideChar &KeyChar, TShiftState Shift)
{

	switch (gameState)
	{
	case GAME_STATE_LOGO:
		{
			if (Key == VK_RETURN)
			{
				BitmapListAnimation1->Stop();
				BitmapListAnimation2->Start();
				gameState = GAME_STATE_TRAILER;

				// sndPlaySound(NULL,NULL);
				// wchar_t *wav_handle;
				// HRSRC h = FindResource(HInstance, L"IDR_WAVE2", L"WAV");
				// HGLOBAL h1 = LoadResource(HInstance, h);
				// wav_handle = (wchar_t *)LockResource(h1);
				// sndPlaySound(wav_handle, SND_MEMORY | SND_ASYNC);

			}
			break;
		}
	case GAME_STATE_TRAILER:
		{
			if (Key == VK_UP)
			{
				BitmapListAnimation3->Stop();
				BitmapListAnimation2->Start();
			}
			if (Key == VK_DOWN)
			{
				BitmapListAnimation2->Stop();
				BitmapListAnimation3->Start();
			}
			if (Key == VK_RETURN)
			{
				BitmapListAnimation2->Stop();
				BitmapListAnimation3->Stop();
				BitmapListAnimation4->Start();
				gameState = GAME_STATE_MAIN_MENU;
			}
			break;
		}
	case GAME_STATE_MAIN_MENU:
		{
			break;
		}
	case GAME_STATE_INGAME:
		{
			break;
		}
	case GAME_STATE_SETTINGS_MENU:
		{
			break;
		}
	defaut:
		{
			break;
		}
	}

	if (Key == VK_ESCAPE)
		exit(0);
}
// ---------------------------------------------------------------------------

int Load_WAV()
{

	HRESULT hr;
	char * str[2] =
	{"C:\\c++\\epbgit\\2.sound\\direct_sound\\Debug\\annu6.wav", "C:\\c++\\epbgit\\2.sound\\direct_sound\\Debug\\gtitle.wav"};

	 char *wav_handle;
	 HRSRC h = FindResource(HInstance, L"IDR_WAVE1", L"WAV");
	 HGLOBAL h1 = LoadResource(HInstance, h);
	 wav_handle = (char *)LockResource(h1);
   //	 sndPlaySound(wav_handle, SND_MEMORY | SND_ASYNC | SND_LOOP);

	Sound = new sound[2];

	for (int i = 0; i < 2; i++)
	{
	 //	strcpy_s(Sound[i].szFileName, 256, str[i]);
		 strcpy_s(Sound[i].szFileName, 256, wav_handle);
	}
	wchar_t wFileName[256];
	for (int i = 0; i < 2; i++)
	{
		mbstowcs(wFileName, Sound[i].szFileName, 256);
		Sound[i].pGraphBuilder = NULL;
		Sound[i].pMediaControl = NULL;
		Sound[i].pMediaSeeking = NULL;
		Sound[i].pMediaEventEx = NULL;

		hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER,
			IID_IGraphBuilder, (void**)&Sound[i].pGraphBuilder);
		if (SUCCEEDED(hr))
		{
			hr = Sound[i].pGraphBuilder->QueryInterface(IID_IMediaControl,
				(void **)&Sound[i].pMediaControl);
			hr = Sound[i].pGraphBuilder->QueryInterface(IID_IMediaSeeking,
				(void**)&Sound[i].pMediaSeeking);
			hr = Sound[i].pGraphBuilder->QueryInterface(IID_IMediaEventEx,
				(void**)&Sound[i].pMediaEventEx);
			Sound[i].pGraphBuilder->RenderFile(wFileName, NULL);
			Sound[i].pMediaSeeking->GetDuration(&Sound[i].lDuration100NanoSecs);
			Sound[i].totalDuration = Sound[i].lDuration100NanoSecs / 10000000;
			Sound[i].temporary = (long)Sound[i].totalDuration;
			if (Sound[i].temporary == 0)
			{
			}
			else
				Sound[i].step = (float)100 / Sound[i].temporary;
		}

	}

	return 0;
}

void SoundPlay(long index)
{
	LONGLONG start = 0;
	if (Sound[index].pMediaSeeking)
	{
		Sound[index].pMediaSeeking->SetPositions(&start,
			AM_SEEKING_AbsolutePositioning, &Sound[index].lDuration100NanoSecs,
			AM_SEEKING_AbsolutePositioning);
		Sound[index].pMediaControl->Run();
	}

}
